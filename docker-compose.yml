services:
  postgres:
    image: postgres:16-alpine
    container_name: restaurant_db_new
    environment:
      POSTGRES_DB: restaurant_reservation
      POSTGRES_USER: myuser  
      POSTGRES_PASSWORD: mypass
      POSTGRES_INITDB_ARGS: "--auth-local=trust --auth-host=md5"
    ports:
      - "5432:5432"
    volumes:
      - fresh_postgres_data:/var/lib/postgresql/data
    networks:
      - restaurant_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d restaurant_reservation"]
      interval: 5s
      timeout: 5s
      retries: 10

  backend:
    build: ./backend
    container_name: restaurant_backend_new
    ports:
      - "5001:5001"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://myuser:mypass@postgres:5432/restaurant_reservation
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - JWT_SECRET=${JWT_SECRET:-fallback-jwt-secret}
      - SESSION_SECRET=${SESSION_SECRET:-fallback-session-secret}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - restaurant_network
    restart: unless-stopped

  frontend:
    build: ./frontend
    container_name: restaurant_frontend_new
    ports:
      - "3001:3001"
    environment:
      - REACT_APP_API_URL=http://localhost:5001
      - REACT_APP_GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - PORT=3001
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - restaurant_network

volumes:
  fresh_postgres_data:  # Brand new volume name

networks:
  restaurant_network:
    driver: bridge